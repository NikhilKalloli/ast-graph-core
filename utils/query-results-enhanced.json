[
  {
    "captureType": "import_statement",
    "nodeType": "import_statement",
    "textPreview": "import chalk from 'chalk';",
    "fullText": "import chalk from 'chalk';",
    "startLine": 1
  },
  {
    "captureType": "import_source",
    "nodeType": "string",
    "textPreview": "'chalk'",
    "fullText": "'chalk'",
    "startLine": 1
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'chalk'",
    "fullText": "'chalk'",
    "startLine": 1
  },
  {
    "captureType": "import_statement",
    "nodeType": "import_statement",
    "textPreview": "import { Option } from 'nest-commander';",
    "fullText": "import { Option } from 'nest-commander';",
    "startLine": 2
  },
  {
    "captureType": "import_source",
    "nodeType": "string",
    "textPreview": "'nest-commander'",
    "fullText": "'nest-commander'",
    "startLine": 2
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'nest-commander'",
    "fullText": "'nest-commander'",
    "startLine": 2
  },
  {
    "captureType": "import_statement",
    "nodeType": "import_statement",
    "textPreview": "import { WorkspaceActivationStatus } from 'twenty-shared';",
    "fullText": "import { WorkspaceActivationStatus } from 'twenty-shared';",
    "startLine": 3
  },
  {
    "captureType": "import_source",
    "nodeType": "string",
    "textPreview": "'twenty-shared'",
    "fullText": "'twenty-shared'",
    "startLine": 3
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'twenty-shared'",
    "fullText": "'twenty-shared'",
    "startLine": 3
  },
  {
    "captureType": "import_statement",
    "nodeType": "import_statement",
    "textPreview": "import { In, MoreThanOrEqual, Repository } from 'typeorm';",
    "fullText": "import { In, MoreThanOrEqual, Repository } from 'typeorm';",
    "startLine": 4
  },
  {
    "captureType": "import_source",
    "nodeType": "string",
    "textPreview": "'typeorm'",
    "fullText": "'typeorm'",
    "startLine": 4
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'typeorm'",
    "fullText": "'typeorm'",
    "startLine": 4
  },
  {
    "captureType": "import_statement",
    "nodeType": "import_statement",
    "textPreview": "import { MigrationCommandRunner } from 'src/database/command...",
    "fullText": "import { MigrationCommandRunner } from 'src/database/commands/command-runners/migration.command-runner';",
    "startLine": 6
  },
  {
    "captureType": "import_source",
    "nodeType": "string",
    "textPreview": "'src/database/commands/command-runners/migration.command-run...",
    "fullText": "'src/database/commands/command-runners/migration.command-runner'",
    "startLine": 6
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'src/database/commands/command-runners/migration.command-run...",
    "fullText": "'src/database/commands/command-runners/migration.command-runner'",
    "startLine": 6
  },
  {
    "captureType": "import_statement",
    "nodeType": "import_statement",
    "textPreview": "import { Workspace } from 'src/engine/core-modules/workspace...",
    "fullText": "import { Workspace } from 'src/engine/core-modules/workspace/workspace.entity';",
    "startLine": 7
  },
  {
    "captureType": "import_source",
    "nodeType": "string",
    "textPreview": "'src/engine/core-modules/workspace/workspace.entity'",
    "fullText": "'src/engine/core-modules/workspace/workspace.entity'",
    "startLine": 7
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'src/engine/core-modules/workspace/workspace.entity'",
    "fullText": "'src/engine/core-modules/workspace/workspace.entity'",
    "startLine": 7
  },
  {
    "captureType": "import_statement",
    "nodeType": "import_statement",
    "textPreview": "import { WorkspaceDataSource } from 'src/engine/twenty-orm/d...",
    "fullText": "import { WorkspaceDataSource } from 'src/engine/twenty-orm/datasource/workspace.datasource';",
    "startLine": 8
  },
  {
    "captureType": "import_source",
    "nodeType": "string",
    "textPreview": "'src/engine/twenty-orm/datasource/workspace.datasource'",
    "fullText": "'src/engine/twenty-orm/datasource/workspace.datasource'",
    "startLine": 8
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'src/engine/twenty-orm/datasource/workspace.datasource'",
    "fullText": "'src/engine/twenty-orm/datasource/workspace.datasource'",
    "startLine": 8
  },
  {
    "captureType": "import_statement",
    "nodeType": "import_statement",
    "textPreview": "import { TwentyORMGlobalManager } from 'src/engine/twenty-or...",
    "fullText": "import { TwentyORMGlobalManager } from 'src/engine/twenty-orm/twenty-orm-global.manager';",
    "startLine": 9
  },
  {
    "captureType": "import_source",
    "nodeType": "string",
    "textPreview": "'src/engine/twenty-orm/twenty-orm-global.manager'",
    "fullText": "'src/engine/twenty-orm/twenty-orm-global.manager'",
    "startLine": 9
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'src/engine/twenty-orm/twenty-orm-global.manager'",
    "fullText": "'src/engine/twenty-orm/twenty-orm-global.manager'",
    "startLine": 9
  },
  {
    "captureType": "export_statement",
    "nodeType": "export_statement",
    "textPreview": "export type ActiveOrSuspendedWorkspacesMigrationCommandOptio...",
    "fullText": "export type ActiveOrSuspendedWorkspacesMigrationCommandOptions = {\r\n  workspaceIds: string[];\r\n  startFromWorkspaceId?: string;\r\n  workspaceCountLimit?: number;\r\n  dryRun?: boolean;\r\n  verbose?: boolean;\r\n};",
    "startLine": 11
  },
  {
    "captureType": "type_alias_definition",
    "nodeType": "type_alias_declaration",
    "textPreview": "type ActiveOrSuspendedWorkspacesMigrationCommandOptions = {\r...",
    "fullText": "type ActiveOrSuspendedWorkspacesMigrationCommandOptions = {\r\n  workspaceIds: string[];\r\n  startFromWorkspaceId?: string;\r\n  workspaceCountLimit?: number;\r\n  dryRun?: boolean;\r\n  verbose?: boolean;\r\n};",
    "startLine": 11
  },
  {
    "captureType": "type_alias_name",
    "nodeType": "type_identifier",
    "textPreview": "ActiveOrSuspendedWorkspacesMigrationCommandOptions",
    "fullText": "ActiveOrSuspendedWorkspacesMigrationCommandOptions",
    "startLine": 11
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": string[]",
    "fullText": ": string[]",
    "startLine": 12
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": string",
    "fullText": ": string",
    "startLine": 13
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": number",
    "fullText": ": number",
    "startLine": 14
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": boolean",
    "fullText": ": boolean",
    "startLine": 15
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": boolean",
    "fullText": ": boolean",
    "startLine": 16
  },
  {
    "captureType": "export_statement",
    "nodeType": "export_statement",
    "textPreview": "export type RunOnWorkspaceArgs = {\r\n  options: ActiveOrSuspe...",
    "fullText": "export type RunOnWorkspaceArgs = {\r\n  options: ActiveOrSuspendedWorkspacesMigrationCommandOptions;\r\n  workspaceId: string;\r\n  dataSource: WorkspaceDataSource;\r\n  index: number;\r\n  total: number;\r\n};",
    "startLine": 19
  },
  {
    "captureType": "type_alias_definition",
    "nodeType": "type_alias_declaration",
    "textPreview": "type RunOnWorkspaceArgs = {\r\n  options: ActiveOrSuspendedWor...",
    "fullText": "type RunOnWorkspaceArgs = {\r\n  options: ActiveOrSuspendedWorkspacesMigrationCommandOptions;\r\n  workspaceId: string;\r\n  dataSource: WorkspaceDataSource;\r\n  index: number;\r\n  total: number;\r\n};",
    "startLine": 19
  },
  {
    "captureType": "type_alias_name",
    "nodeType": "type_identifier",
    "textPreview": "RunOnWorkspaceArgs",
    "fullText": "RunOnWorkspaceArgs",
    "startLine": 19
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": ActiveOrSuspendedWorkspacesMigrationCommandOptions",
    "fullText": ": ActiveOrSuspendedWorkspacesMigrationCommandOptions",
    "startLine": 20
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": string",
    "fullText": ": string",
    "startLine": 21
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": WorkspaceDataSource",
    "fullText": ": WorkspaceDataSource",
    "startLine": 22
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": number",
    "fullText": ": number",
    "startLine": 23
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": number",
    "fullText": ": number",
    "startLine": 24
  },
  {
    "captureType": "export_statement",
    "nodeType": "export_statement",
    "textPreview": "export abstract class ActiveOrSuspendedWorkspacesMigrationCo...",
    "fullText": "export abstract class ActiveOrSuspendedWorkspacesMigrationCommandRunner<\r\n  Options extends\r\n    ActiveOrSuspendedWorkspacesMigrationCommandOptions = ActiveOrSuspendedWorkspacesMigrationCommandOptions,\r\n> extends MigrationCommandRunner {\r\n  private workspaceIds: string[] = [];\r\n  private startFromWorkspaceId: string | undefined;\r\n  private workspaceCountLimit: number | undefined;\r\n\r\n  constructor(\r\n    protected readonly workspaceRepository: Repository<Workspace>,\r\n    protected readonly twentyORMGlobalManager: TwentyORMGlobalManager,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  @Option({\r\n    flags: '--start-from-workspace-id [workspace_id]',\r\n    description:\r\n      'Start from a specific workspace id. Workspaces are processed in ascending order of id.',\r\n    required: false,\r\n  })\r\n  parseStartFromWorkspaceId(val: string): string {\r\n    this.startFromWorkspaceId = val;\r\n\r\n    return val;\r\n  }\r\n\r\n  @Option({\r\n    flags: '--workspace-count-limit [count]',\r\n    description:\r\n      'Limit the number of workspaces to process. Workspaces are processed in ascending order of id.',\r\n    required: false,\r\n  })\r\n  parseWorkspaceCountLimit(val: string): number {\r\n    this.workspaceCountLimit = parseInt(val);\r\n\r\n    if (isNaN(this.workspaceCountLimit)) {\r\n      throw new Error('Workspace count limit must be a number');\r\n    }\r\n\r\n    if (this.workspaceCountLimit <= 0) {\r\n      throw new Error('Workspace count limit must be greater than 0');\r\n    }\r\n\r\n    return this.workspaceCountLimit;\r\n  }\r\n\r\n  @Option({\r\n    flags: '-w, --workspace-id [workspace_id]',\r\n    description:\r\n      'workspace id. Command runs on all active workspaces if not provided.',\r\n    required: false,\r\n  })\r\n  parseWorkspaceId(val: string): string[] {\r\n    this.workspaceIds.push(val);\r\n\r\n    return this.workspaceIds;\r\n  }\r\n\r\n  protected async fetchActiveWorkspaceIds(): Promise<string[]> {\r\n    const activeWorkspaces = await this.workspaceRepository.find({\r\n      select: ['id'],\r\n      where: {\r\n        activationStatus: In([\r\n          WorkspaceActivationStatus.ACTIVE,\r\n          WorkspaceActivationStatus.SUSPENDED,\r\n        ]),\r\n        ...(this.startFromWorkspaceId\r\n          ? { id: MoreThanOrEqual(this.startFromWorkspaceId) }\r\n          : {}),\r\n      },\r\n      order: {\r\n        id: 'ASC',\r\n      },\r\n      take: this.workspaceCountLimit,\r\n    });\r\n\r\n    return activeWorkspaces.map((workspace) => workspace.id);\r\n  }\r\n\r\n  override async runMigrationCommand(\r\n    _passedParams: string[],\r\n    options: Options,\r\n  ): Promise<void> {\r\n    const activeWorkspaceIds =\r\n      this.workspaceIds.length > 0\r\n        ? this.workspaceIds\r\n        : await this.fetchActiveWorkspaceIds();\r\n\r\n    if (options.dryRun) {\r\n      this.logger.log(chalk.yellow('Dry run mode: No changes will be applied'));\r\n    }\r\n\r\n    try {\r\n      for (const [index, workspaceId] of activeWorkspaceIds.entries()) {\r\n        this.logger.log(\r\n          `Running command on workspace ${workspaceId} ${index + 1}/${activeWorkspaceIds.length}`,\r\n        );\r\n\r\n        try {\r\n          const dataSource =\r\n            await this.twentyORMGlobalManager.getDataSourceForWorkspace(\r\n              workspaceId,\r\n              false,\r\n            );\r\n\r\n          await this.runOnWorkspace({\r\n            options,\r\n            workspaceId,\r\n            dataSource,\r\n            index: index,\r\n            total: activeWorkspaceIds.length,\r\n          });\r\n        } catch (error) {\r\n          this.logger.warn(\r\n            chalk.red(`Error in workspace ${workspaceId}: ${error.message}`),\r\n          );\r\n        }\r\n\r\n        await this.twentyORMGlobalManager.destroyDataSourceForWorkspace(\r\n          workspaceId,\r\n        );\r\n      }\r\n    } catch (error) {\r\n      this.logger.error(error);\r\n    }\r\n  }\r\n\r\n  protected abstract runOnWorkspace(args: RunOnWorkspaceArgs): Promise<void>;\r\n}",
    "startLine": 27
  },
  {
    "captureType": "class_property",
    "nodeType": "public_field_definition",
    "textPreview": "private workspaceIds: string[] = []",
    "fullText": "private workspaceIds: string[] = []",
    "startLine": 31
  },
  {
    "captureType": "class_prop_name",
    "nodeType": "property_identifier",
    "textPreview": "workspaceIds",
    "fullText": "workspaceIds",
    "startLine": 31
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": string[]",
    "fullText": ": string[]",
    "startLine": 31
  },
  {
    "captureType": "class_property",
    "nodeType": "public_field_definition",
    "textPreview": "private startFromWorkspaceId: string | undefined",
    "fullText": "private startFromWorkspaceId: string | undefined",
    "startLine": 32
  },
  {
    "captureType": "class_prop_name",
    "nodeType": "property_identifier",
    "textPreview": "startFromWorkspaceId",
    "fullText": "startFromWorkspaceId",
    "startLine": 32
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": string | undefined",
    "fullText": ": string | undefined",
    "startLine": 32
  },
  {
    "captureType": "class_property",
    "nodeType": "public_field_definition",
    "textPreview": "private workspaceCountLimit: number | undefined",
    "fullText": "private workspaceCountLimit: number | undefined",
    "startLine": 33
  },
  {
    "captureType": "class_prop_name",
    "nodeType": "property_identifier",
    "textPreview": "workspaceCountLimit",
    "fullText": "workspaceCountLimit",
    "startLine": 33
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": number | undefined",
    "fullText": ": number | undefined",
    "startLine": 33
  },
  {
    "captureType": "method_definition",
    "nodeType": "method_definition",
    "textPreview": "constructor(\r\n    protected readonly workspaceRepository: Re...",
    "fullText": "constructor(\r\n    protected readonly workspaceRepository: Repository<Workspace>,\r\n    protected readonly twentyORMGlobalManager: TwentyORMGlobalManager,\r\n  ) {\r\n    super();\r\n  }",
    "startLine": 35
  },
  {
    "captureType": "method_name",
    "nodeType": "property_identifier",
    "textPreview": "constructor",
    "fullText": "constructor",
    "startLine": 35
  },
  {
    "captureType": "method_params",
    "nodeType": "formal_parameters",
    "textPreview": "(\r\n    protected readonly workspaceRepository: Repository<Wo...",
    "fullText": "(\r\n    protected readonly workspaceRepository: Repository<Workspace>,\r\n    protected readonly twentyORMGlobalManager: TwentyORMGlobalManager,\r\n  )",
    "startLine": 35
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": Repository<Workspace>",
    "fullText": ": Repository<Workspace>",
    "startLine": 36
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": TwentyORMGlobalManager",
    "fullText": ": TwentyORMGlobalManager",
    "startLine": 37
  },
  {
    "captureType": "method_body",
    "nodeType": "statement_block",
    "textPreview": "{\r\n    super();\r\n  }",
    "fullText": "{\r\n    super();\r\n  }",
    "startLine": 38
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "Option({\r\n    flags: '--start-from-workspace-id [workspace_i...",
    "fullText": "Option({\r\n    flags: '--start-from-workspace-id [workspace_id]',\r\n    description:\r\n      'Start from a specific workspace id. Workspaces are processed in ascending order of id.',\r\n    required: false,\r\n  })",
    "startLine": 42
  },
  {
    "captureType": "call_func_name",
    "nodeType": "identifier",
    "textPreview": "Option",
    "fullText": "Option",
    "startLine": 42
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'--start-from-workspace-id [workspace_id]'",
    "fullText": "'--start-from-workspace-id [workspace_id]'",
    "startLine": 43
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'Start from a specific workspace id. Workspaces are processe...",
    "fullText": "'Start from a specific workspace id. Workspaces are processed in ascending order of id.'",
    "startLine": 45
  },
  {
    "captureType": "boolean_literal_false",
    "nodeType": "false",
    "textPreview": "false",
    "fullText": "false",
    "startLine": 46
  },
  {
    "captureType": "method_definition",
    "nodeType": "method_definition",
    "textPreview": "parseStartFromWorkspaceId(val: string): string {\r\n    this.s...",
    "fullText": "parseStartFromWorkspaceId(val: string): string {\r\n    this.startFromWorkspaceId = val;\r\n\r\n    return val;\r\n  }",
    "startLine": 48
  },
  {
    "captureType": "method_name",
    "nodeType": "property_identifier",
    "textPreview": "parseStartFromWorkspaceId",
    "fullText": "parseStartFromWorkspaceId",
    "startLine": 48
  },
  {
    "captureType": "method_params",
    "nodeType": "formal_parameters",
    "textPreview": "(val: string)",
    "fullText": "(val: string)",
    "startLine": 48
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": string",
    "fullText": ": string",
    "startLine": 48
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": string",
    "fullText": ": string",
    "startLine": 48
  },
  {
    "captureType": "method_body",
    "nodeType": "statement_block",
    "textPreview": "{\r\n    this.startFromWorkspaceId = val;\r\n\r\n    return val;\r\n...",
    "fullText": "{\r\n    this.startFromWorkspaceId = val;\r\n\r\n    return val;\r\n  }",
    "startLine": 48
  },
  {
    "captureType": "assignment",
    "nodeType": "assignment_expression",
    "textPreview": "this.startFromWorkspaceId = val",
    "fullText": "this.startFromWorkspaceId = val",
    "startLine": 49
  },
  {
    "captureType": "assign_target",
    "nodeType": "member_expression",
    "textPreview": "this.startFromWorkspaceId",
    "fullText": "this.startFromWorkspaceId",
    "startLine": 49
  },
  {
    "captureType": "assign_value",
    "nodeType": "identifier",
    "textPreview": "val",
    "fullText": "val",
    "startLine": 49
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "Option({\r\n    flags: '--workspace-count-limit [count]',\r\n   ...",
    "fullText": "Option({\r\n    flags: '--workspace-count-limit [count]',\r\n    description:\r\n      'Limit the number of workspaces to process. Workspaces are processed in ascending order of id.',\r\n    required: false,\r\n  })",
    "startLine": 54
  },
  {
    "captureType": "call_func_name",
    "nodeType": "identifier",
    "textPreview": "Option",
    "fullText": "Option",
    "startLine": 54
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'--workspace-count-limit [count]'",
    "fullText": "'--workspace-count-limit [count]'",
    "startLine": 55
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'Limit the number of workspaces to process. Workspaces are p...",
    "fullText": "'Limit the number of workspaces to process. Workspaces are processed in ascending order of id.'",
    "startLine": 57
  },
  {
    "captureType": "boolean_literal_false",
    "nodeType": "false",
    "textPreview": "false",
    "fullText": "false",
    "startLine": 58
  },
  {
    "captureType": "method_definition",
    "nodeType": "method_definition",
    "textPreview": "parseWorkspaceCountLimit(val: string): number {\r\n    this.wo...",
    "fullText": "parseWorkspaceCountLimit(val: string): number {\r\n    this.workspaceCountLimit = parseInt(val);\r\n\r\n    if (isNaN(this.workspaceCountLimit)) {\r\n      throw new Error('Workspace count limit must be a number');\r\n    }\r\n\r\n    if (this.workspaceCountLimit <= 0) {\r\n      throw new Error('Workspace count limit must be greater than 0');\r\n    }\r\n\r\n    return this.workspaceCountLimit;\r\n  }",
    "startLine": 60
  },
  {
    "captureType": "method_name",
    "nodeType": "property_identifier",
    "textPreview": "parseWorkspaceCountLimit",
    "fullText": "parseWorkspaceCountLimit",
    "startLine": 60
  },
  {
    "captureType": "method_params",
    "nodeType": "formal_parameters",
    "textPreview": "(val: string)",
    "fullText": "(val: string)",
    "startLine": 60
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": string",
    "fullText": ": string",
    "startLine": 60
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": number",
    "fullText": ": number",
    "startLine": 60
  },
  {
    "captureType": "method_body",
    "nodeType": "statement_block",
    "textPreview": "{\r\n    this.workspaceCountLimit = parseInt(val);\r\n\r\n    if (...",
    "fullText": "{\r\n    this.workspaceCountLimit = parseInt(val);\r\n\r\n    if (isNaN(this.workspaceCountLimit)) {\r\n      throw new Error('Workspace count limit must be a number');\r\n    }\r\n\r\n    if (this.workspaceCountLimit <= 0) {\r\n      throw new Error('Workspace count limit must be greater than 0');\r\n    }\r\n\r\n    return this.workspaceCountLimit;\r\n  }",
    "startLine": 60
  },
  {
    "captureType": "assignment",
    "nodeType": "assignment_expression",
    "textPreview": "this.workspaceCountLimit = parseInt(val)",
    "fullText": "this.workspaceCountLimit = parseInt(val)",
    "startLine": 61
  },
  {
    "captureType": "assign_target",
    "nodeType": "member_expression",
    "textPreview": "this.workspaceCountLimit",
    "fullText": "this.workspaceCountLimit",
    "startLine": 61
  },
  {
    "captureType": "assign_value",
    "nodeType": "call_expression",
    "textPreview": "parseInt(val)",
    "fullText": "parseInt(val)",
    "startLine": 61
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "parseInt(val)",
    "fullText": "parseInt(val)",
    "startLine": 61
  },
  {
    "captureType": "call_func_name",
    "nodeType": "identifier",
    "textPreview": "parseInt",
    "fullText": "parseInt",
    "startLine": 61
  },
  {
    "captureType": "if_statement",
    "nodeType": "if_statement",
    "textPreview": "if (isNaN(this.workspaceCountLimit)) {\r\n      throw new Erro...",
    "fullText": "if (isNaN(this.workspaceCountLimit)) {\r\n      throw new Error('Workspace count limit must be a number');\r\n    }",
    "startLine": 63
  },
  {
    "captureType": "if_condition",
    "nodeType": "parenthesized_expression",
    "textPreview": "(isNaN(this.workspaceCountLimit))",
    "fullText": "(isNaN(this.workspaceCountLimit))",
    "startLine": 63
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "isNaN(this.workspaceCountLimit)",
    "fullText": "isNaN(this.workspaceCountLimit)",
    "startLine": 63
  },
  {
    "captureType": "call_func_name",
    "nodeType": "identifier",
    "textPreview": "isNaN",
    "fullText": "isNaN",
    "startLine": 63
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'Workspace count limit must be a number'",
    "fullText": "'Workspace count limit must be a number'",
    "startLine": 64
  },
  {
    "captureType": "if_statement",
    "nodeType": "if_statement",
    "textPreview": "if (this.workspaceCountLimit <= 0) {\r\n      throw new Error(...",
    "fullText": "if (this.workspaceCountLimit <= 0) {\r\n      throw new Error('Workspace count limit must be greater than 0');\r\n    }",
    "startLine": 67
  },
  {
    "captureType": "if_condition",
    "nodeType": "parenthesized_expression",
    "textPreview": "(this.workspaceCountLimit <= 0)",
    "fullText": "(this.workspaceCountLimit <= 0)",
    "startLine": 67
  },
  {
    "captureType": "number_literal",
    "nodeType": "number",
    "textPreview": "0",
    "fullText": "0",
    "startLine": 67
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'Workspace count limit must be greater than 0'",
    "fullText": "'Workspace count limit must be greater than 0'",
    "startLine": 68
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "Option({\r\n    flags: '-w, --workspace-id [workspace_id]',\r\n ...",
    "fullText": "Option({\r\n    flags: '-w, --workspace-id [workspace_id]',\r\n    description:\r\n      'workspace id. Command runs on all active workspaces if not provided.',\r\n    required: false,\r\n  })",
    "startLine": 74
  },
  {
    "captureType": "call_func_name",
    "nodeType": "identifier",
    "textPreview": "Option",
    "fullText": "Option",
    "startLine": 74
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'-w, --workspace-id [workspace_id]'",
    "fullText": "'-w, --workspace-id [workspace_id]'",
    "startLine": 75
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'workspace id. Command runs on all active workspaces if not ...",
    "fullText": "'workspace id. Command runs on all active workspaces if not provided.'",
    "startLine": 77
  },
  {
    "captureType": "boolean_literal_false",
    "nodeType": "false",
    "textPreview": "false",
    "fullText": "false",
    "startLine": 78
  },
  {
    "captureType": "method_definition",
    "nodeType": "method_definition",
    "textPreview": "parseWorkspaceId(val: string): string[] {\r\n    this.workspac...",
    "fullText": "parseWorkspaceId(val: string): string[] {\r\n    this.workspaceIds.push(val);\r\n\r\n    return this.workspaceIds;\r\n  }",
    "startLine": 80
  },
  {
    "captureType": "method_name",
    "nodeType": "property_identifier",
    "textPreview": "parseWorkspaceId",
    "fullText": "parseWorkspaceId",
    "startLine": 80
  },
  {
    "captureType": "method_params",
    "nodeType": "formal_parameters",
    "textPreview": "(val: string)",
    "fullText": "(val: string)",
    "startLine": 80
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": string",
    "fullText": ": string",
    "startLine": 80
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": string[]",
    "fullText": ": string[]",
    "startLine": 80
  },
  {
    "captureType": "method_body",
    "nodeType": "statement_block",
    "textPreview": "{\r\n    this.workspaceIds.push(val);\r\n\r\n    return this.works...",
    "fullText": "{\r\n    this.workspaceIds.push(val);\r\n\r\n    return this.workspaceIds;\r\n  }",
    "startLine": 80
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "this.workspaceIds.push(val)",
    "fullText": "this.workspaceIds.push(val)",
    "startLine": 81
  },
  {
    "captureType": "call_object",
    "nodeType": "member_expression",
    "textPreview": "this.workspaceIds",
    "fullText": "this.workspaceIds",
    "startLine": 81
  },
  {
    "captureType": "call_method_name",
    "nodeType": "property_identifier",
    "textPreview": "push",
    "fullText": "push",
    "startLine": 81
  },
  {
    "captureType": "method_definition",
    "nodeType": "method_definition",
    "textPreview": "protected async fetchActiveWorkspaceIds(): Promise<string[]>...",
    "fullText": "protected async fetchActiveWorkspaceIds(): Promise<string[]> {\r\n    const activeWorkspaces = await this.workspaceRepository.find({\r\n      select: ['id'],\r\n      where: {\r\n        activationStatus: In([\r\n          WorkspaceActivationStatus.ACTIVE,\r\n          WorkspaceActivationStatus.SUSPENDED,\r\n        ]),\r\n        ...(this.startFromWorkspaceId\r\n          ? { id: MoreThanOrEqual(this.startFromWorkspaceId) }\r\n          : {}),\r\n      },\r\n      order: {\r\n        id: 'ASC',\r\n      },\r\n      take: this.workspaceCountLimit,\r\n    });\r\n\r\n    return activeWorkspaces.map((workspace) => workspace.id);\r\n  }",
    "startLine": 86
  },
  {
    "captureType": "method_name",
    "nodeType": "property_identifier",
    "textPreview": "fetchActiveWorkspaceIds",
    "fullText": "fetchActiveWorkspaceIds",
    "startLine": 86
  },
  {
    "captureType": "method_params",
    "nodeType": "formal_parameters",
    "textPreview": "()",
    "fullText": "()",
    "startLine": 86
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": Promise<string[]>",
    "fullText": ": Promise<string[]>",
    "startLine": 86
  },
  {
    "captureType": "method_body",
    "nodeType": "statement_block",
    "textPreview": "{\r\n    const activeWorkspaces = await this.workspaceReposito...",
    "fullText": "{\r\n    const activeWorkspaces = await this.workspaceRepository.find({\r\n      select: ['id'],\r\n      where: {\r\n        activationStatus: In([\r\n          WorkspaceActivationStatus.ACTIVE,\r\n          WorkspaceActivationStatus.SUSPENDED,\r\n        ]),\r\n        ...(this.startFromWorkspaceId\r\n          ? { id: MoreThanOrEqual(this.startFromWorkspaceId) }\r\n          : {}),\r\n      },\r\n      order: {\r\n        id: 'ASC',\r\n      },\r\n      take: this.workspaceCountLimit,\r\n    });\r\n\r\n    return activeWorkspaces.map((workspace) => workspace.id);\r\n  }",
    "startLine": 86
  },
  {
    "captureType": "variable_declaration",
    "nodeType": "lexical_declaration",
    "textPreview": "const activeWorkspaces = await this.workspaceRepository.find...",
    "fullText": "const activeWorkspaces = await this.workspaceRepository.find({\r\n      select: ['id'],\r\n      where: {\r\n        activationStatus: In([\r\n          WorkspaceActivationStatus.ACTIVE,\r\n          WorkspaceActivationStatus.SUSPENDED,\r\n        ]),\r\n        ...(this.startFromWorkspaceId\r\n          ? { id: MoreThanOrEqual(this.startFromWorkspaceId) }\r\n          : {}),\r\n      },\r\n      order: {\r\n        id: 'ASC',\r\n      },\r\n      take: this.workspaceCountLimit,\r\n    });",
    "startLine": 87
  },
  {
    "captureType": "variable_name",
    "nodeType": "identifier",
    "textPreview": "activeWorkspaces",
    "fullText": "activeWorkspaces",
    "startLine": 87
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "this.workspaceRepository.find({\r\n      select: ['id'],\r\n    ...",
    "fullText": "this.workspaceRepository.find({\r\n      select: ['id'],\r\n      where: {\r\n        activationStatus: In([\r\n          WorkspaceActivationStatus.ACTIVE,\r\n          WorkspaceActivationStatus.SUSPENDED,\r\n        ]),\r\n        ...(this.startFromWorkspaceId\r\n          ? { id: MoreThanOrEqual(this.startFromWorkspaceId) }\r\n          : {}),\r\n      },\r\n      order: {\r\n        id: 'ASC',\r\n      },\r\n      take: this.workspaceCountLimit,\r\n    })",
    "startLine": 87
  },
  {
    "captureType": "call_object",
    "nodeType": "member_expression",
    "textPreview": "this.workspaceRepository",
    "fullText": "this.workspaceRepository",
    "startLine": 87
  },
  {
    "captureType": "call_method_name",
    "nodeType": "property_identifier",
    "textPreview": "find",
    "fullText": "find",
    "startLine": 87
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'id'",
    "fullText": "'id'",
    "startLine": 88
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "In([\r\n          WorkspaceActivationStatus.ACTIVE,\r\n         ...",
    "fullText": "In([\r\n          WorkspaceActivationStatus.ACTIVE,\r\n          WorkspaceActivationStatus.SUSPENDED,\r\n        ])",
    "startLine": 90
  },
  {
    "captureType": "call_func_name",
    "nodeType": "identifier",
    "textPreview": "In",
    "fullText": "In",
    "startLine": 90
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "MoreThanOrEqual(this.startFromWorkspaceId)",
    "fullText": "MoreThanOrEqual(this.startFromWorkspaceId)",
    "startLine": 95
  },
  {
    "captureType": "call_func_name",
    "nodeType": "identifier",
    "textPreview": "MoreThanOrEqual",
    "fullText": "MoreThanOrEqual",
    "startLine": 95
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'ASC'",
    "fullText": "'ASC'",
    "startLine": 99
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "activeWorkspaces.map((workspace) => workspace.id)",
    "fullText": "activeWorkspaces.map((workspace) => workspace.id)",
    "startLine": 104
  },
  {
    "captureType": "call_object",
    "nodeType": "identifier",
    "textPreview": "activeWorkspaces",
    "fullText": "activeWorkspaces",
    "startLine": 104
  },
  {
    "captureType": "call_method_name",
    "nodeType": "property_identifier",
    "textPreview": "map",
    "fullText": "map",
    "startLine": 104
  },
  {
    "captureType": "method_definition",
    "nodeType": "method_definition",
    "textPreview": "override async runMigrationCommand(\r\n    _passedParams: stri...",
    "fullText": "override async runMigrationCommand(\r\n    _passedParams: string[],\r\n    options: Options,\r\n  ): Promise<void> {\r\n    const activeWorkspaceIds =\r\n      this.workspaceIds.length > 0\r\n        ? this.workspaceIds\r\n        : await this.fetchActiveWorkspaceIds();\r\n\r\n    if (options.dryRun) {\r\n      this.logger.log(chalk.yellow('Dry run mode: No changes will be applied'));\r\n    }\r\n\r\n    try {\r\n      for (const [index, workspaceId] of activeWorkspaceIds.entries()) {\r\n        this.logger.log(\r\n          `Running command on workspace ${workspaceId} ${index + 1}/${activeWorkspaceIds.length}`,\r\n        );\r\n\r\n        try {\r\n          const dataSource =\r\n            await this.twentyORMGlobalManager.getDataSourceForWorkspace(\r\n              workspaceId,\r\n              false,\r\n            );\r\n\r\n          await this.runOnWorkspace({\r\n            options,\r\n            workspaceId,\r\n            dataSource,\r\n            index: index,\r\n            total: activeWorkspaceIds.length,\r\n          });\r\n        } catch (error) {\r\n          this.logger.warn(\r\n            chalk.red(`Error in workspace ${workspaceId}: ${error.message}`),\r\n          );\r\n        }\r\n\r\n        await this.twentyORMGlobalManager.destroyDataSourceForWorkspace(\r\n          workspaceId,\r\n        );\r\n      }\r\n    } catch (error) {\r\n      this.logger.error(error);\r\n    }\r\n  }",
    "startLine": 107
  },
  {
    "captureType": "method_name",
    "nodeType": "property_identifier",
    "textPreview": "runMigrationCommand",
    "fullText": "runMigrationCommand",
    "startLine": 107
  },
  {
    "captureType": "method_params",
    "nodeType": "formal_parameters",
    "textPreview": "(\r\n    _passedParams: string[],\r\n    options: Options,\r\n  )",
    "fullText": "(\r\n    _passedParams: string[],\r\n    options: Options,\r\n  )",
    "startLine": 107
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": string[]",
    "fullText": ": string[]",
    "startLine": 108
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": Options",
    "fullText": ": Options",
    "startLine": 109
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": Promise<void>",
    "fullText": ": Promise<void>",
    "startLine": 110
  },
  {
    "captureType": "method_body",
    "nodeType": "statement_block",
    "textPreview": "{\r\n    const activeWorkspaceIds =\r\n      this.workspaceIds.l...",
    "fullText": "{\r\n    const activeWorkspaceIds =\r\n      this.workspaceIds.length > 0\r\n        ? this.workspaceIds\r\n        : await this.fetchActiveWorkspaceIds();\r\n\r\n    if (options.dryRun) {\r\n      this.logger.log(chalk.yellow('Dry run mode: No changes will be applied'));\r\n    }\r\n\r\n    try {\r\n      for (const [index, workspaceId] of activeWorkspaceIds.entries()) {\r\n        this.logger.log(\r\n          `Running command on workspace ${workspaceId} ${index + 1}/${activeWorkspaceIds.length}`,\r\n        );\r\n\r\n        try {\r\n          const dataSource =\r\n            await this.twentyORMGlobalManager.getDataSourceForWorkspace(\r\n              workspaceId,\r\n              false,\r\n            );\r\n\r\n          await this.runOnWorkspace({\r\n            options,\r\n            workspaceId,\r\n            dataSource,\r\n            index: index,\r\n            total: activeWorkspaceIds.length,\r\n          });\r\n        } catch (error) {\r\n          this.logger.warn(\r\n            chalk.red(`Error in workspace ${workspaceId}: ${error.message}`),\r\n          );\r\n        }\r\n\r\n        await this.twentyORMGlobalManager.destroyDataSourceForWorkspace(\r\n          workspaceId,\r\n        );\r\n      }\r\n    } catch (error) {\r\n      this.logger.error(error);\r\n    }\r\n  }",
    "startLine": 110
  },
  {
    "captureType": "variable_declaration",
    "nodeType": "lexical_declaration",
    "textPreview": "const activeWorkspaceIds =\r\n      this.workspaceIds.length >...",
    "fullText": "const activeWorkspaceIds =\r\n      this.workspaceIds.length > 0\r\n        ? this.workspaceIds\r\n        : await this.fetchActiveWorkspaceIds();",
    "startLine": 111
  },
  {
    "captureType": "variable_name",
    "nodeType": "identifier",
    "textPreview": "activeWorkspaceIds",
    "fullText": "activeWorkspaceIds",
    "startLine": 111
  },
  {
    "captureType": "number_literal",
    "nodeType": "number",
    "textPreview": "0",
    "fullText": "0",
    "startLine": 112
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "this.fetchActiveWorkspaceIds()",
    "fullText": "this.fetchActiveWorkspaceIds()",
    "startLine": 114
  },
  {
    "captureType": "call_object",
    "nodeType": "this",
    "textPreview": "this",
    "fullText": "this",
    "startLine": 114
  },
  {
    "captureType": "call_method_name",
    "nodeType": "property_identifier",
    "textPreview": "fetchActiveWorkspaceIds",
    "fullText": "fetchActiveWorkspaceIds",
    "startLine": 114
  },
  {
    "captureType": "if_statement",
    "nodeType": "if_statement",
    "textPreview": "if (options.dryRun) {\r\n      this.logger.log(chalk.yellow('D...",
    "fullText": "if (options.dryRun) {\r\n      this.logger.log(chalk.yellow('Dry run mode: No changes will be applied'));\r\n    }",
    "startLine": 116
  },
  {
    "captureType": "if_condition",
    "nodeType": "parenthesized_expression",
    "textPreview": "(options.dryRun)",
    "fullText": "(options.dryRun)",
    "startLine": 116
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "this.logger.log(chalk.yellow('Dry run mode: No changes will ...",
    "fullText": "this.logger.log(chalk.yellow('Dry run mode: No changes will be applied'))",
    "startLine": 117
  },
  {
    "captureType": "call_object",
    "nodeType": "member_expression",
    "textPreview": "this.logger",
    "fullText": "this.logger",
    "startLine": 117
  },
  {
    "captureType": "call_method_name",
    "nodeType": "property_identifier",
    "textPreview": "log",
    "fullText": "log",
    "startLine": 117
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "chalk.yellow('Dry run mode: No changes will be applied')",
    "fullText": "chalk.yellow('Dry run mode: No changes will be applied')",
    "startLine": 117
  },
  {
    "captureType": "call_object",
    "nodeType": "identifier",
    "textPreview": "chalk",
    "fullText": "chalk",
    "startLine": 117
  },
  {
    "captureType": "call_method_name",
    "nodeType": "property_identifier",
    "textPreview": "yellow",
    "fullText": "yellow",
    "startLine": 117
  },
  {
    "captureType": "string_literal",
    "nodeType": "string",
    "textPreview": "'Dry run mode: No changes will be applied'",
    "fullText": "'Dry run mode: No changes will be applied'",
    "startLine": 117
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "activeWorkspaceIds.entries()",
    "fullText": "activeWorkspaceIds.entries()",
    "startLine": 121
  },
  {
    "captureType": "call_object",
    "nodeType": "identifier",
    "textPreview": "activeWorkspaceIds",
    "fullText": "activeWorkspaceIds",
    "startLine": 121
  },
  {
    "captureType": "call_method_name",
    "nodeType": "property_identifier",
    "textPreview": "entries",
    "fullText": "entries",
    "startLine": 121
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "this.logger.log(\r\n          `Running command on workspace ${...",
    "fullText": "this.logger.log(\r\n          `Running command on workspace ${workspaceId} ${index + 1}/${activeWorkspaceIds.length}`,\r\n        )",
    "startLine": 122
  },
  {
    "captureType": "call_object",
    "nodeType": "member_expression",
    "textPreview": "this.logger",
    "fullText": "this.logger",
    "startLine": 122
  },
  {
    "captureType": "call_method_name",
    "nodeType": "property_identifier",
    "textPreview": "log",
    "fullText": "log",
    "startLine": 122
  },
  {
    "captureType": "number_literal",
    "nodeType": "number",
    "textPreview": "1",
    "fullText": "1",
    "startLine": 123
  },
  {
    "captureType": "variable_declaration",
    "nodeType": "lexical_declaration",
    "textPreview": "const dataSource =\r\n            await this.twentyORMGlobalMa...",
    "fullText": "const dataSource =\r\n            await this.twentyORMGlobalManager.getDataSourceForWorkspace(\r\n              workspaceId,\r\n              false,\r\n            );",
    "startLine": 127
  },
  {
    "captureType": "variable_name",
    "nodeType": "identifier",
    "textPreview": "dataSource",
    "fullText": "dataSource",
    "startLine": 127
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "this.twentyORMGlobalManager.getDataSourceForWorkspace(\r\n    ...",
    "fullText": "this.twentyORMGlobalManager.getDataSourceForWorkspace(\r\n              workspaceId,\r\n              false,\r\n            )",
    "startLine": 128
  },
  {
    "captureType": "call_object",
    "nodeType": "member_expression",
    "textPreview": "this.twentyORMGlobalManager",
    "fullText": "this.twentyORMGlobalManager",
    "startLine": 128
  },
  {
    "captureType": "call_method_name",
    "nodeType": "property_identifier",
    "textPreview": "getDataSourceForWorkspace",
    "fullText": "getDataSourceForWorkspace",
    "startLine": 128
  },
  {
    "captureType": "boolean_literal_false",
    "nodeType": "false",
    "textPreview": "false",
    "fullText": "false",
    "startLine": 130
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "this.runOnWorkspace({\r\n            options,\r\n            wor...",
    "fullText": "this.runOnWorkspace({\r\n            options,\r\n            workspaceId,\r\n            dataSource,\r\n            index: index,\r\n            total: activeWorkspaceIds.length,\r\n          })",
    "startLine": 133
  },
  {
    "captureType": "call_object",
    "nodeType": "this",
    "textPreview": "this",
    "fullText": "this",
    "startLine": 133
  },
  {
    "captureType": "call_method_name",
    "nodeType": "property_identifier",
    "textPreview": "runOnWorkspace",
    "fullText": "runOnWorkspace",
    "startLine": 133
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "this.logger.warn(\r\n            chalk.red(`Error in workspace...",
    "fullText": "this.logger.warn(\r\n            chalk.red(`Error in workspace ${workspaceId}: ${error.message}`),\r\n          )",
    "startLine": 141
  },
  {
    "captureType": "call_object",
    "nodeType": "member_expression",
    "textPreview": "this.logger",
    "fullText": "this.logger",
    "startLine": 141
  },
  {
    "captureType": "call_method_name",
    "nodeType": "property_identifier",
    "textPreview": "warn",
    "fullText": "warn",
    "startLine": 141
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "chalk.red(`Error in workspace ${workspaceId}: ${error.messag...",
    "fullText": "chalk.red(`Error in workspace ${workspaceId}: ${error.message}`)",
    "startLine": 142
  },
  {
    "captureType": "call_object",
    "nodeType": "identifier",
    "textPreview": "chalk",
    "fullText": "chalk",
    "startLine": 142
  },
  {
    "captureType": "call_method_name",
    "nodeType": "property_identifier",
    "textPreview": "red",
    "fullText": "red",
    "startLine": 142
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "this.twentyORMGlobalManager.destroyDataSourceForWorkspace(\r\n...",
    "fullText": "this.twentyORMGlobalManager.destroyDataSourceForWorkspace(\r\n          workspaceId,\r\n        )",
    "startLine": 146
  },
  {
    "captureType": "call_object",
    "nodeType": "member_expression",
    "textPreview": "this.twentyORMGlobalManager",
    "fullText": "this.twentyORMGlobalManager",
    "startLine": 146
  },
  {
    "captureType": "call_method_name",
    "nodeType": "property_identifier",
    "textPreview": "destroyDataSourceForWorkspace",
    "fullText": "destroyDataSourceForWorkspace",
    "startLine": 146
  },
  {
    "captureType": "call_expression",
    "nodeType": "call_expression",
    "textPreview": "this.logger.error(error)",
    "fullText": "this.logger.error(error)",
    "startLine": 151
  },
  {
    "captureType": "call_object",
    "nodeType": "member_expression",
    "textPreview": "this.logger",
    "fullText": "this.logger",
    "startLine": 151
  },
  {
    "captureType": "call_method_name",
    "nodeType": "property_identifier",
    "textPreview": "error",
    "fullText": "error",
    "startLine": 151
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": RunOnWorkspaceArgs",
    "fullText": ": RunOnWorkspaceArgs",
    "startLine": 155
  },
  {
    "captureType": "type_annotation",
    "nodeType": "type_annotation",
    "textPreview": ": Promise<void>",
    "fullText": ": Promise<void>",
    "startLine": 155
  }
]